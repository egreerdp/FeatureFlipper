// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

type Storer_Expecter struct {
	mock *mock.Mock
}

func (_m *Storer) EXPECT() *Storer_Expecter {
	return &Storer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: key, enabled
func (_m *Storer) Create(key string, enabled bool) error {
	ret := _m.Called(key, enabled)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(key, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Storer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - key string
//   - enabled bool
func (_e *Storer_Expecter) Create(key interface{}, enabled interface{}) *Storer_Create_Call {
	return &Storer_Create_Call{Call: _e.mock.On("Create", key, enabled)}
}

func (_c *Storer_Create_Call) Run(run func(key string, enabled bool)) *Storer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Storer_Create_Call) Return(_a0 error) *Storer_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storer_Create_Call) RunAndReturn(run func(string, bool) error) *Storer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *Storer) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Storer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *Storer_Expecter) Delete(key interface{}) *Storer_Delete_Call {
	return &Storer_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *Storer_Delete_Call) Run(run func(key string)) *Storer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storer_Delete_Call) Return(_a0 error) *Storer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storer_Delete_Call) RunAndReturn(run func(string) error) *Storer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: key
func (_m *Storer) Read(key string) (bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Storer_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - key string
func (_e *Storer_Expecter) Read(key interface{}) *Storer_Read_Call {
	return &Storer_Read_Call{Call: _e.mock.On("Read", key)}
}

func (_c *Storer_Read_Call) Run(run func(key string)) *Storer_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storer_Read_Call) Return(_a0 bool, _a1 error) *Storer_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storer_Read_Call) RunAndReturn(run func(string) (bool, error)) *Storer_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: key, enabled
func (_m *Storer) Update(key string, enabled bool) error {
	ret := _m.Called(key, enabled)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(key, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Storer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key string
//   - enabled bool
func (_e *Storer_Expecter) Update(key interface{}, enabled interface{}) *Storer_Update_Call {
	return &Storer_Update_Call{Call: _e.mock.On("Update", key, enabled)}
}

func (_c *Storer_Update_Call) Run(run func(key string, enabled bool)) *Storer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Storer_Update_Call) Return(_a0 error) *Storer_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storer_Update_Call) RunAndReturn(run func(string, bool) error) *Storer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
